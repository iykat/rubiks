// SPDX-License-Identifier: MIT
pragma solidity ^0.8.19;

import "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/cryptography/ECDSA.sol";

contract UConnect {
    using ECDSA for bytes32;

    address public owner;
    mapping(address => bytes32) private pinHashes;

    // Set the contract deployer as the owner
    constructor() {
        owner = msg.sender;
    }

    // Modifier to restrict function access to only the owner
    modifier onlyOwner() {
        require(msg.sender == owner, "Not the contract owner");
        _;
    }

    // Function to check the balance of the calling address
    function checkBalance() external view returns (uint256) {
        return address(msg.sender).balance;
    }

    // Function to send Ether to a specified address
    function sendFunds(address payable _to, uint256 _amount) external onlyOwner {
        require(address(this).balance >= _amount, "Insufficient balance in the contract");
        _to.transfer(_amount);
    }

    // Function to allow a user to set a PIN
    function setPin(string memory _pin) external {
        require(bytes(_pin).length == 4, "PIN must be 4 characters long");  // Assuming a 4-digit PIN
        bytes32 hashedPin = keccak256(abi.encodePacked(_pin));
        pinHashes[msg.sender] = hashedPin;
    }

    // Function to validate the user's PIN
    function validatePin(string memory _pin) external view returns (bool) {
        bytes32 hashedPin = keccak256(abi.encodePacked(_pin));
        return pinHashes[msg.sender] == hashedPin;
    }
}
