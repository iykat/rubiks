// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import "@openzeppelin/contracts/utils/cryptography/ECDSA.sol";

contract UConnect {
    using ECDSA for bytes32;

    address public owner;
    mapping(address => bytes32) private pinHashes;
    mapping(address => uint256) private deposits;

    // Set the contract deployer as the owner
    constructor() {
        owner = msg.sender;
    }

    // Function to deposit funds into the contract for later sending
    function deposit() external payable {
        deposits[msg.sender] += msg.value;
    }

    // Function to check the deposited balance of the calling address
    function balanceOf() external view returns (uint256) {
        return deposits[msg.sender];
    }

    // Function to send deposited Ether to a specified address
    function sendFunds(address payable _to, uint256 _amount, string memory _pin) external {
        bytes32 hashedPin = keccak256(abi.encodePacked(_pin));
        require(pinHashes[msg.sender] == hashedPin, "Incorrect PIN");

        uint256 userBalance = deposits[msg.sender];
        require(userBalance >= _amount, "Insufficient deposited balance");
        
        deposits[msg.sender] -= _amount;
        _to.transfer(_amount);
    }

    // Function to allow a user to set a PIN
    function setPin(string memory _pin) external {
        require(bytes(_pin).length == 4, "PIN must be 4 characters long");  // Assuming a 4-digit PIN
        bytes32 hashedPin = keccak256(abi.encodePacked(_pin));
        pinHashes[msg.sender] = hashedPin;
    }

    // Function to validate the user's PIN
    function validatePin(string memory _pin) external view returns (bool) {
        bytes32 hashedPin = keccak256(abi.encodePacked(_pin));
        return pinHashes[msg.sender] == hashedPin;
    }
}